{
	"info": {
		"_postman_id": "20f5a369-d9ed-4abc-903e-2715b3544ec8",
		"name": "Avaliação Desenvolvimento Web 2",
		"description": "## Descrição do Projeto\n\nEste projeto consiste em uma aplicação para gerenciamento de produtos, que permite cadastrar, atualizar, listar e excluir produtos, além de registrar as operações realizadas em uma tabela de logs. A aplicação utiliza um banco de dados SQLite para armazenamento de dados.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "38574305"
	},
	"item": [
		{
			"name": "Produto",
			"item": [
				{
					"name": "get all produtos",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response time is less than 200ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"// Test for status code 200",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/produto",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produto"
							]
						},
						"description": "Esse método deve retornar todos os produtos presentes no banco de dados.  \n  \nExemplo de resposta:  \n\"  \nid:12  \nnome: Pipa  \ndecricao: Pipa muito bonita que voa muito alto  \npreco: 10.0  \nestoque: 12  \nUserInsert: Felipe  \n\"  \n\"  \nid:13  \nnome: Carrinho  \ndecricao: Carrinho de controle remoto muito veloz  \npreco: 100.0  \nestoque: 10  \nUserInsert: Lucas  \n\""
					},
					"response": []
				},
				{
					"name": "search by id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									" ",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response body has the required fields for a product\", function () {",
									"    const responseData = pm.response.json();",
									"",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data.nome).to.exist;",
									"    pm.expect(responseData.data.preco).to.exist;",
									"    pm.expect(responseData.data.descricao).to.exist;",
									"    pm.expect(responseData.data.estoque).to.exist;",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/produto/{{id_produto}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produto",
								"{{id_produto}}"
							]
						},
						"description": "Esse método deve retornar um produto especifico, baseado no seu \"id\".\n\nParametros de Entrada:\n\nO \"id\" do produto deve existir no banco de dados.\n\nExemplo de resposta:\n\nerro 400: \"Error ao realizar a requisição corrija os dados enviados\"."
					},
					"response": []
				},
				{
					"name": "create produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {",
									"  pm.response.to.have.status(201);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"Monitor LED\",\n    \"descricao\": \"monitor super wide full master hd\",\n    \"preco\": 800.0,\n    \"estoque\": 30,\n    \"userInsert\": \"Loucas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/produto",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produto"
							]
						},
						"description": "Esse método deve criar um produto quando acionado.\n\n### **Parâmetros de Entrada:**\n\nNome: Mínimo 3 caracteres  \nPreço: Preço deve ser número de ponto flutuante e positivo  \nEstoque: O estoque deve ser um número inteiro e positivo.\n\n### **Exemplo de Requisição:**\n\n[http://localhost:8080/produto](http://localhost:8080/produto)\n\n### Exemplo de Resposta:\n\nCaso o usuário tenha errado o nome:\n\nerro 400: \"Nome do Produto deve ter no minimo 3 caracteres\".\n\nCaso usuário tenha errado o preço:  \nerro 400: \"O preço do produto deve ser um número de ponto flutuante e positivo.\"\n\nCaso usuário tenha errado o estoque:  \nerro 400: \"O estoque para o produto deve ser um número inteiro e positivo.\"\n\nCaso o produto não exista:  \nerro 404: Error ao realizar a requisição corrija os dados enviados."
					},
					"response": []
				},
				{
					"name": "create produto Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"nome\": \"Teclado mecânico\",\n    \"descricao\": \"low profile com suites de baixo impacto\",\n    \"preco\": 500.0,\n    \"estoque\": 40,\n    \"userInsert\": \"Feucas\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/produto/{{id_produto}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produto",
								"{{id_produto}}"
							]
						},
						"description": "Esse comando deve atualizar um produto já existente.\n\nParâmetros de Entrada:\n\nNome: Mínimo 3 caracteres  \nPreço: Preço deve ser número de ponto flutuante e positivo  \nEstoque: O estoque deve ser um número inteiro e positivo.  \nId: O id do produto deve existir no banco de dados.\n\n### Exemplo de Resposta:\n\nCaso o usuário tenha errado o nome:\n\nerro 400: \"Nome do Produto deve ter no minimo 3 caracteres\".\n\nCaso usuário tenha errado o preço:  \nerro 400: \"O preço do produto deve ser um número de ponto flutuante e positivo.\"\n\nCaso usuário tenha errado o estoque:  \nerro 400: \"O estoque para o produto deve ser um número inteiro e positivo.\"\n\nCaso o produto não exista:  \nerro 404: Error ao realizar a requisição corrija os dados enviados."
					},
					"response": []
				},
				{
					"name": "search by id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 250ms\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Validate the response schema for DELETE request\", function () {",
									"    pm.expect(pm.response.json()).to.be.an('object');",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/produto/{{id_produto}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"produto",
								"{{id_produto}}"
							]
						},
						"description": "Esse comando deve deletar um produto já existente no banco de dados.\n\nParâmetros de Entrada:\n\nO produto a ser excluído deve existir no banco de dados.\n\nExemplos de Reposta:\n\nSucesso200:\"Registro Excluído com Sucesso \"\n\nErro400: \"Erro ao realizar a exclusão do registro\""
					},
					"response": []
				}
			],
			"description": "Folder que contém os métodos relacionados aos produtos."
		},
		{
			"name": "Log",
			"item": [
				{
					"name": "get all logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response time is within an acceptable range\", function () {",
									"  pm.expect(pm.response.responseTime).to.be.below(250);",
									"});",
									"",
									"",
									"pm.test(\"Status is a boolean value\", function () {",
									"  const responseData = pm.response.json();",
									"  pm.expect(responseData.status).to.be.a('boolean');",
									"});",
									"",
									"",
									"pm.test(\"Data is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.data).to.be.an('array').and.to.have.lengthOf.at.least(1);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/log",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"log"
							]
						},
						"description": "Este endponint retorna todos os logs que foram realizados.\n\nExemplo de Requisição:  \n[http://localhost:8080/log](http://localhost:8080/)\n\nExemplo de Resposta:\n\n  \nacao: get  \ndata_hora: 20.59  \nproduto_id: 12  \nuserInsert: Lucas"
					},
					"response": []
				}
			],
			"description": "Folder que contem os registros dos métodos ultilizados."
		}
	]
}